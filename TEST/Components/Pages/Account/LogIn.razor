@page "/login"
@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using TEST.Modelos;
@using TEST.Modelos.DTOs
@inject NavigationManager NavigationManager
@inject IMapper _mapper
@inject UserManager<Usuario> _userManager
@inject SignInManager<Usuario> _signInManager

<style>
    body {
        font-family: 'Bodoni Moda', serif;
        font-size: 16px;
        line-height: 1.6;
    }

    .login-form-container {
        max-width: 400px;
        margin: 120px auto;
        background: #ffffff; /* Fondo blanco para el formulario */
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

    .login-title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #333333;
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: 600;
        color: #555555;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #ddd;
        padding: 10px;
        font-size: 14px;
    }

    .form-control:focus {
        border-color: #4a90e2;
        box-shadow: 0 0 5px rgba(74, 144, 226, 0.5);
    }

    .btn-primary {
        background: #4a90e2;
        border: none;
        border-radius: 8px;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        transition: background 0.3s;
    }

    .btn-primary:hover {
        background: #357ab8;
    }

    .alert {
        font-size: 14px;
        margin-top: 15px;
    }

    .error-message {
        color: red;
        font-size: 14px;
        margin-top: 5px;
    }

    
</style>

<div class="login-form-container">
    <h3 class="login-title">Iniciar Sesión</h3>
    <EditForm Model="loginModel" OnValidSubmit="@HandleValidSubmit" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <div class="form-group mb-3">
            <label for="email">Correo electrónico</label>
            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            <ValidationMessage For="@(() => loginModel.Email)" class="error-message" />
        </div>

        <div class="form-group mb-3">
            <label for="password">Contraseña</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" class="error-message" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Iniciar Sesión</button>
    </EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    LogInDTO? loginModel { get; set; } = new LogInDTO();

    private string errorMessage;

    public async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(loginModel.Email) || string.IsNullOrEmpty(loginModel.Password))
        {
            errorMessage = "Por favor, completa todos los campos.";
            return;
        }

        var user = await _userManager.FindByEmailAsync(loginModel.Email);
        if (user == null)
        {
            errorMessage = "El correo electrónico no está registrado.";
            return;
        }

        loginModel.Email = loginModel.Email.ToLower();

        var res = await _signInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, true, true);

        if (res.Succeeded)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Correo o contraseña incorrectos.";
        }
    }
}
