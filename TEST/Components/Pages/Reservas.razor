@page "/reserva"
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@using TEST.Controllers.Habitaciones
@using TEST.Controllers.Reservas
@using TEST.Modelos
@using TEST.Modelos.DTOs

@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IReservasController ReservasController
@inject IHabitacionesController HabitacionesController
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Usuario> UserManager


<style>

    .Rform {
        max-width: 600px;
        margin: 100px auto;
        background: #ffffff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'Bodoni Moda', serif;
    }

        .Rform h3 {
            text-align: center;
            font-size: 28px;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

    .form-label {
        font-weight: 600;
        color: #555;
        margin-bottom: 5px;
        display: block;
    }

    .form-control {
        width: 100%;
        border-radius: 8px;
        border: 1px solid #ddd;
        padding: 10px;
        font-size: 14px;
        margin-bottom: 15px;
        box-sizing: border-box;
    }

        .form-control:focus {
            border-color: #4a90e2;
            box-shadow: 0 0 5px rgba(74, 144, 226, 0.5);
        }

    .btn {
        border-radius: 8px;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        transition: background 0.3s;
        width: 100%;
    }

    .btn-success {
        background: #4caf50;
        border: none;
        color: white;
    }

        .btn-success:hover {
            background: #388e3c;
        }

    .btn-primary {
        background: #4a90e2;
        border: none;
        color: white;
    }

        .btn-primary:hover {
            background: #357ab8;
        }

    .btn-warning {
        background: #ff9800;
        border: none;
        color: white;
    }

        .btn-warning:hover {
            background: #e68900;
        }

    .alert {
        font-size: 14px;
        margin-top: 15px;
        color: red;
    }

    .loader {
        display: inline-block;
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top-color: #4a90e2;
        animation: spin 1s ease-in-out infinite;
    }

    .rz-tabview-nav {
        display: block; /* Sobrescribe el estilo predeterminado */
    }

    .Rform input.btn.btn-warning {
        margin-top: 10px;
    }

    
</style>

<div class="Rform">

    <h3>Reserva</h3>

    @if (reservaDto == null)
    {
        <span class="loader"></span>
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm Model="reservaDto" FormName="ReservaFechas" OnValidSubmit="@HandleSubmit">
            <RadzenFieldset Text="Nueva Reserva">
                <div class="mt-4">
                    <RadzenStack Gap="1rem">
                        <RadzenTabs SelectedIndex="0">
                            <Tabs>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn>
                                        <RadzenRow>
                                            <RadzenColumn>
                                                <label class="form-label">Seleccione fecha de entrada:</label>
                                                <InputDate class="form-control" @bind-Value="reservaDto.FechaEntrada"></InputDate>
                                            </RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn>
                                                <label class="form-label">Seleccione una fecha de salida:</label>
                                                <InputDate class="form-control" @bind-Value="reservaDto.FechaSalida"></InputDate>
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <!-- Botón para buscar habitaciones -->
                                        <RadzenRow>
                                            <RadzenColumn>
                                                <input class="btn btn-success" type="button" value="Buscar" @onclick="BuscarHabitaciones" />
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <RadzenRow>
                                            <RadzenColumn>
                                                <label class="form-label">Seleccione la habitación:</label>
                                                <InputSelect class="form-control" @bind-Value="reservaDto.NumeroH" Disabled="@(!habitaciones?.Any() ?? true)">
                                                    <option value="">Seleccione una habitación</option>
                                                    @if (habitaciones != null)
                                                    {
                                                        @foreach (var habitacion in habitaciones)
                                                        {
                                                            <option value="@habitacion.Numero">@($"Número: {habitacion.Numero} - Planta: {habitacion.Planta} - Precio: {habitacion.Precio} por noche")</option>
                                                        }
                                                    }
                                                </InputSelect>
                                            </RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn>
                                                <input class="btn btn-primary" type="submit" value="Guardar">
                                            </RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn class="d-flex gap-4">
                                                <input class="btn btn-warning" type="button" value="Cancelar" @onclick="HandleCancel">
                                            </RadzenColumn>
                                        </RadzenRow>
                                    </RadzenColumn>
                                </RadzenRow>
                            </Tabs>
                        </RadzenTabs>
                    </RadzenStack>
                </div>
            </RadzenFieldset>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromForm]
    ReservaDTO? reservaDto { get; set; }

    HabitacionDTO? habitacionDto { get; set; }

    [SupplyParameterFromForm]
    IEnumerable<HabitacionDTO?>? habitaciones { get; set; }

    private string? userId { get; set; }
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/AccessDenied");
            return;
        }

        userId = await UserManager.GetUserIdAsync(await UserManager.GetUserAsync(user));
        reservaDto = new ReservaDTO();
    }

    // Método para buscar habitaciones disponibles
    private async Task BuscarHabitaciones()
    {
        // Validar las fechas antes de buscar
        if (reservaDto.FechaEntrada == default || reservaDto.FechaSalida == default)
        {
            errorMessage = "Por favor, seleccione ambas fechas.";
            return;
        }

        if (reservaDto.FechaEntrada < DateTime.Today || reservaDto.FechaSalida < DateTime.Today)
        {
            errorMessage = "Las fechas no pueden ser anteriores al día de hoy.";
            return;
        }

        if (reservaDto.FechaEntrada > reservaDto.FechaSalida)
        {
            errorMessage = "La fecha de entrada debe ser anterior a la fecha de salida.";
            return;
        }

        // Obtener habitaciones disponibles
        habitaciones = await HabitacionesController.GetHabitacionesDisponibles(reservaDto.FechaEntrada, reservaDto.FechaSalida);

        // Habilitar el select si se encuentran habitaciones
        if (habitaciones?.Any() ?? false)
        {
            errorMessage = string.Empty;

            // Calcular el número de noches para el precio total
            int numeroDeNoches = (reservaDto.FechaSalida - reservaDto.FechaEntrada).Value.Days;

            // Calcular el total basado en el número de noches y el precio de la habitación seleccionada
            if (reservaDto.NumeroH > 0)  // Verificar que se haya seleccionado una habitación
            {
                habitacionDto = habitaciones.FirstOrDefault(h => h.Numero == reservaDto.NumeroH);
                if (habitacionDto != null)
                {
                    reservaDto.Total = habitacionDto.Precio * numeroDeNoches;
                }
            }
        }
        else
        {
            errorMessage = "No hay habitaciones disponibles para las fechas seleccionadas.";
        }
    }

    private async Task HandleSubmit()
    {
        errorMessage = string.Empty;

        // Validar fechas
        if (reservaDto.FechaEntrada == default || reservaDto.FechaSalida == default)
        {
            errorMessage = "Por favor, seleccione ambas fechas.";
            return;
        }

        if (reservaDto.FechaEntrada < DateTime.Today || reservaDto.FechaSalida < DateTime.Today)
        {
            errorMessage = "Las fechas no pueden ser anteriores al día de hoy.";
            return;
        }

        if (reservaDto.FechaEntrada > reservaDto.FechaSalida)
        {
            errorMessage = "La fecha de entrada debe ser anterior a la fecha de salida.";
            return;
        }

        // Validar habitación seleccionada
        if (reservaDto.NumeroH == 0) // Considerando que 0 indica que no se seleccionó ninguna habitación
        {
            errorMessage = "Debe seleccionar una habitación.";
            return;
        }

        // Faltan controles de errores adicionales
        habitacionDto = await HabitacionesController.GetHabitacionById(reservaDto.NumeroH);

        reservaDto.IdUsuario = userId;
        reservaDto.FechaReserva = DateTime.Now;
        // Calcular el número de noches para el precio total
        int numeroDeNoches = (reservaDto.FechaSalida - reservaDto.FechaEntrada).Value.Days;
        reservaDto.Total = habitacionDto.Precio * numeroDeNoches;
        ReservasController.CrearReserva(reservaDto);

        habitacionDto.Disponible = false;
        HabitacionesController.EditarHabitacion(habitacionDto);

        NavigationManager.NavigateTo("/servicios");
    }

    private async void HandleCancel()
    {
        bool cancelar = await jsRuntime.InvokeAsync<bool>("confirm", "Se perderán los datos introducidos. ¿Deseas cancelar la operación?");
        if (cancelar)
            NavigationManager.NavigateTo("/");
    }
}

